(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const s=a(377),r=a(613),{AxisScrollStrategies:n,AxisTickStrategies:o,emptyLine:l,synchronizeAxisIntervals:i,lightningChart:d,LegendBoxBuilders:m,UIElementBuilders:c,UIOrigins:u,emptyFill:p,Themes:g}=s,{createProgressiveTraceGenerator:x}=r,h=[{name:"Trend #1"},{name:"Trend #2"},{name:"Trend #3"}],v=h.length,y=d({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).Dashboard({theme:g[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0,numberOfColumns:1,numberOfRows:2}).setRowHeight(0,1).setRowHeight(1,.4),C=y.createChartXY({columnIndex:0,rowIndex:0}).setTitle("Real-Time Chart + DataGrid"),S=y.createDataGrid({columnIndex:0,rowIndex:1}).setTitle("").setColumnContent(0,["",...h.map((e=>e.name))]).setRowContent(0,["","Latest value","Previous value","value 15 s"]),T=h.map((e=>C.addPointLineAreaSeries({dataPattern:"ProgressiveX"}).setAreaFillStyle(p).setMaxSampleCount(5e4).setName(e.name))),w=C.getDefaultAxisX().setScrollStrategy(n.progressive).setDefaultInterval((e=>({end:e.dataMax,start:(e.dataMax??0)-6e4,stopAxisAfter:!1}))).setTickStrategy(o.Time),f=C.addAxisX({opposite:!0}).setTickStrategy(o.Empty).setStrokeStyle(l).setPointerEvents(!1);i(w,f);const k=f.addCustomTick(c.AxisTickMajor).setTextFormatter((e=>"-15 s")),F=C.addLegendBox(m.HorizontalLegendBox,C.coordsRelative).add(C);C.addEventListener("layoutchange",(e=>{F.setOrigin(u.CenterBottom).setPosition({x:e.margins.left+e.viewportWidth/2,y:e.margins.bottom})}));const I=y.getTheme(),A=I.examples.positiveTextFillStyle,B=I.examples.negativeTextFillStyle,P=I.examples.positiveBackgroundFillStyle,R=I.examples.negativeBackgroundFillStyle;Promise.all(new Array(v).fill(0).map((e=>x().setNumberOfPoints(5e4).generate().toPromise().then((e=>e.map((e=>100+e.y))))))).then((e=>{const t=h.map((()=>({previous:0,previous15s:0}))),a=Date.now();let s=0;const r=setInterval((()=>{((e,s)=>{const r=Date.now();T.forEach(((t,s)=>t.add({x:r-a,y:e[s]}))),s&&(t.forEach(((t,a)=>{t.previous15s=e[a]})),setInterval((()=>{t.forEach(((e,t)=>{e.previous15s=e.previous})),k.setValue(Date.now()-a)}),15e3)),e.forEach(((e,a)=>{const s=t[a],r=e,n=s.previous,o=s.previous15s;S.setCellContent(1,a+1,`${r.toFixed(1)}`).setCellTextFillStyle(1,a+1,r>n?A:B).setCellBackgroundFillStyle(1,a+1,r>n?P:R).setCellContent(2,a+1,`${n.toFixed(1)}`).setCellTextFillStyle(2,a+1,n>o?A:B).setCellBackgroundFillStyle(2,a+1,n>o?P:R).setCellContent(3,a+1,`${o.toFixed(1)}`),s.previous=r}))})(new Array(v).fill(0).map(((t,a)=>e[a][s])),0===s),s+=1,s>=5e4&&clearInterval(r)}),50)}))}},e=>{e.O(0,[502],(()=>e(e.s=44))),e.O()}]);